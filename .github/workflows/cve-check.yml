name: CVE Check

# This check can be executed locally as follows:
#
# Install Trivy, see https://aquasecurity.github.io/trivy/v0.18.3/installation/
# $ brew install aquasecurity/trivy/trivy
#
# Lock dependencies
# $ ./gradlew resolveAndLockAll --write-locks
#
# Check for vulnerabilities
# $ trivy fs -s CRITICAL --scanners vuln .
# "CRITICAL" can be "MEDIUM,HIGH,CRITICAL" as well
#
# Remove created lockfiles:
# $ find . -name gradle.lockfile -delete

on:
  schedule:
    - cron: "23 4 * * *"

jobs:
  trivy-vulnerability-check:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3

      - name: Set up JDK 17
        uses: actions/setup-java@5ffc13f4174014e2d4d4572b3d74c3fa61aeb2c2 # v3.11.0
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Create Gradle lockfiles
        run: ./gradlew resolveAndLockAll --write-locks

      - name: Check for vulnerabilities
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54 # v0.11.2
        id: cve_check
        with:
          scan-type: 'fs'
          scanners: 'vuln'
          format: 'json'
          scan-ref: '.'
          severity: 'MEDIUM,HIGH,CRITICAL'
          exit-code: '1'
          output: 'cve-result.json'

      - name: Notify CVEs in Slack
        if: failure()
        env:
          SLACK_WORKFLOW_WEBHOOK: ${{ secrets.SLACK_WORKFLOW_WEBHOOK }}
        # All webhook variables known in the workflow are required.
        # Therefore, empty values are defined in jq and filled with the actual values if they exist.
        run: >
          cat cve-result.json |
          jq -c '.Results[].Vulnerabilities[]? | {VulnerabilityID:"",PkgName:"",InstalledVersion:"",FixedVersion:"",PrimaryURL:"",Title:"",Description:"",Severity:"",PublishedDate:"",LastModifiedDate:""} + .' |
          while IFS=$'\n' read -r json; do curl -X POST $SLACK_WORKFLOW_WEBHOOK --header 'Content-Type: application/json' --data-raw "$json"; done
