name: CVE Check

# This check can be executed locally as follows:
#
# Install Trivy, see https://aquasecurity.github.io/trivy/v0.18.3/installation/
# $ brew install aquasecurity/trivy/trivy
#
# Lock dependencies
# $ ./gradlew resolveAndLockAll --write-locks
#
# Check for vulnerabilities
# $ trivy fs -s CRITICAL --scanners vuln --ignore-policy .github/workflows/ignore-policy.rego .
# "CRITICAL" can be "MEDIUM,HIGH,CRITICAL" as well
#
# Remove created lockfiles:
# $ find . -name gradle.lockfile -delete

on:
  workflow_run:
    workflows:
      - Push Workflow Trigger
    types:
      - completed

jobs:
  trivy-vulnerability-check:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    steps:
      - name: Initiate check
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        env:
          SHA: ${{ github.event.workflow_run.head_sha }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.SHA,
              state: 'pending',
              target_url: `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: "Scanning for CVEs ...",
              context: "trivy-vulnerability-check"
            });
        continue-on-error: true

      - name: Checkout code
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Set up JDK 11
        uses: actions/setup-java@cd89f46ac9d01407894225f350157564c9c7cee2 # v3.12.0
        with:
          distribution: 'temurin'
          java-version: 11
          cache: 'gradle'

      - name: Create Gradle lockfiles
        run: ./gradlew resolveAndLockAll --write-locks

      - name: Check for vulnerabilities
        uses: aquasecurity/trivy-action@41f05d9ecffa2ed3f1580af306000f734b733e54 # v0.11.2
        id: cve_check
        with:
          scan-type: 'fs'
          scanners: 'vuln'
          ignore-unfixed: true
          format: 'json'
          scan-ref: '.'
          severity: 'MEDIUM,HIGH,CRITICAL'
          exit-code: '1'
          output: 'cve-result.json'
          ignore-policy: '.github/workflows/ignore-policy.rego'

      - name: Successful check
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        if: success()
        env:
          SHA: "${{ github.event.workflow_run.head_sha }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.SHA,
              state: 'success',
              target_url: `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: "No CVEs found.",
              context: "trivy-vulnerability-check"
            });

      - name: Failed check
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        if: failure()
        env:
          SHA: "${{ github.event.workflow_run.head_sha }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: process.env.SHA,
              state: 'failure',
              target_url: `https://github.com/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              description: "CVEs found!",
              context: "trivy-vulnerability-check"
            });

      - name: Comment CVEs on PR
        if: failure() && (toJSON(github.event.workflow_run.pull_requests) != '[]')
        uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410 # v6.4.1
        env:
          PR_NUMBER: ${{ github.event.workflow_run.pull_requests[0].number }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require("fs");
            const cveResult = JSON.parse(fs.readFileSync("./cve-result.json"));

            let output = ``;

            cveResult.Results.filter(
              (result) => result.Vulnerabilities !== undefined
            ).forEach((result) => {
              output += `#### ${result.Target}\n`;
              output += "| ID | Package | Version | Severity |\n";
              output += "| --- | --- | --- | --- |\n";

              result.Vulnerabilities.forEach((vuln) => {
                output += `| ${vuln.VulnerabilityID} | ${vuln.PkgName} | ${vuln.InstalledVersion} | ${vuln.Severity} |\n`;
              });
              output += "\n";
            });

            const body = `### Vulnerability Scan failed! ‚ùå
            <details>
                <summary>More details ...</summary>

            ${output}
            </details>`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.PR_NUMBER,
              body: body
            });
