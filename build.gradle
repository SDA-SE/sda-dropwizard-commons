buildscript {
    repositories {
        maven { url "https://plugins.gradle.org/m2/" }
    }
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'jacoco'
    id 'org.sonarqube' version '2.8'
    id 'com.diffplug.gradle.spotless' version '3.27.1'
}

allprojects {
    apply plugin: 'idea'
    idea.module.inheritOutputDirs = true
}

// we need a repository for the combination of jacoco and sonarcloud
repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'maven-publish'
    apply plugin: 'com.diffplug.gradle.spotless'

    group 'org.sdase.commons'

    repositories {
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" } // for sda-commons-server-kafka-confluent-testing only
    }

    spotless {
        if (project.name != 'sda-commons-bom' && project.name != 'sda-commons-dependencies') {
            java {
                googleJavaFormat()
            }
        }
        groovyGradle {
            greclipse()
            indentWithSpaces(2)
        }
    }

    version = System.getenv('SEMANTIC_VERSION')

    publishing {
        repositories {
            maven {
                def releasesRepoUrl = "https://nexus.intern.sda-se.online/repository/sda-se-releases/"
                def snapshotsRepoUrl = "https://nexus.intern.sda-se.online/repository/sda-se-snapshots/"
                url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username System.getenv('SDA_NEXUS_USER')
                    password System.getenv('SDA_NEXUS_PASSWORD')
                }
            }
        }
    }
}

/**
 * Configure all regular submodules (all except the bom module)
 *
 * Problem is: You can't apply plugins 'java' and 'java-platform' at the same time.
 */
configure(subprojects.findAll {it.name != 'sda-commons-bom' && it.name != 'sda-commons-dependencies'}) {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8

    // Configure JaCoCo to export the reports in XML format
    jacocoTestReport {
        reports {
            xml.enabled true
        }
    }

    // Configure sonar to use the aggregated global report file
    sonarqube {
        properties {
            property "sonar.coverage.jacoco.xmlReportPaths", '../build/reports/jacoco/report.xml'
        }
    }

    dependencies {
        compile enforcedPlatform(project(':sda-commons-dependencies'))
    }

    sourceSets {
        main {
            output.resourcesDir = output.classesDirs.singleFile
        }
        test {
            output.resourcesDir = output.classesDirs.singleFile
        }
    }

    configurations.all {
        resolutionStrategy {
            // fail eagerly on version conflict (includes transitive dependencies)
            // e.g. multiple different versions of the same dependency (group and name are equal)
            failOnVersionConflict()
        }
    }
}

/**
 * Add publishing configuration for Java modules.
 *
 * More Infos:
 * - sda-commons-bom uses own publishing because it's just a BOM
 * - example modules and dependency-check should not be published at all
 */
List<String> unpublishedModules = Arrays.asList("sda-commons-bom", "sda-commons-dependencies", "sda-commons-dependency-check")
configure(subprojects.findAll {
    !unpublishedModules.contains(it.name) && !it.name.endsWith("-example")
}) {

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier = 'sources'
        from sourceSets.main.allJava
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java

                artifact sourcesJar
            }
        }
    }

    jar {
        into("META-INF/maven/$project.group/$project.name") {
            from { generatePomFileForMavenPublication }
            rename ".*", "pom.xml"
        }
    }
}

/**
 * Enable parallel test execution for most modules.
 */
configure(subprojects.findAll {
  !Arrays.asList("sda-commons-server-mongo-testing", "sda-commons-server-morphia", "sda-commons-server-morphia-example").contains(it.name) }
) {
  tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
  }
}

// Reconfigure the testReport task to display the results of all modules into a single report
task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects.findAll {it.name != 'sda-commons-bom' && it.name != 'sda-commons-dependencies'}*.test
}

// Create a combined XML report of all modules in the root project
task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        // noinspection GroovyAssignabilityCheck
        sourceSets it.sourceSets.main
    }

    reports {
        xml.enabled = true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
    }
}

sonarqube {
    properties {
        property 'sonar.projectKey', 'SDA-SE_sda-dropwizard-commons'
        property 'sonar.organization', 'sda-se'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.login', System.getenv('SONAR_LOGIN_TOKEN')

        property 'sonar.pullrequest.provider', 'GitHub'
        property 'sonar.pullrequest.github.repository', System.getenv('GITHUB_REPOSITORY')

        if (System.getenv('GITHUB_PR') != null) {
            property 'sonar.pullrequest.key', System.getenv('GITHUB_PR')
        }
    }
}
