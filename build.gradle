buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
}

plugins {
  id 'maven-publish'
  id 'jacoco'
  id 'signing'
  id 'org.sonarqube' version '3.2.0'
  id 'com.diffplug.spotless' version '5.12.4'
  id 'io.codearte.nexus-staging' version '0.22.0'
}

allprojects {
  apply plugin: 'idea'
  idea.module.inheritOutputDirs = true
}

// we need a repository for the combination of jacoco and sonarcloud
repositories {
  mavenCentral()
}

/**
 * Some modules must use the 'java-platform'. Since you can't apply plugins 'java' and 'java-platform'
 * at the same time, they are excluded in some steps.
 */
List<String> javaPlatformModules = Arrays.asList("sda-commons-bom", "sda-commons-dependencies")

/**
 * There are some additional modules that are excluded from publishing
 */
List<String> unpublishedModules = javaPlatformModules + Arrays.asList("sda-commons-dependency-check")
project.ext.unpublishedModules = unpublishedModules

spotless {
  groovyGradle {
    greclipse()
    indentWithSpaces(2)
  }
}

/**
 * Settings for all modules
 */
subprojects {
  apply plugin: 'maven-publish'
  apply plugin: 'com.diffplug.spotless'
  apply plugin: 'signing'

  group 'org.sdase.commons'

  repositories {
    mavenCentral()
  }

  // Disable publication of Gradle Module Metadata
  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }

  spotless {
    if (!javaPlatformModules.contains(project.name)) {
      java {
        // Force it to the last version that is compatible with Java 8.
        // TODO: Cleanup after removal of Java 8 support.
        googleJavaFormat('1.7')
      }
    }
    groovyGradle {
      greclipse()
      indentWithSpaces(2)
    }
  }

  version = System.getenv('SEMANTIC_VERSION')

  // Don't configure publishing for the example projects
  if (!it.name.endsWith("-example")) {
    signing {
      def signingKey = findProperty("signingKey")
      def signingPassword = findProperty("signingPassword")
      useInMemoryPgpKeys(signingKey, signingPassword)
      sign publishing.publications
    }

    tasks.withType(Sign) {
      // skip signing a publication to maven local
      onlyIf { !gradle.taskGraph.hasTask(publishMavenPublicationToMavenLocal) }
    }

    publishing {
      publications {
        maven(MavenPublication) {
          pom {
            name = project.group + ":" + project.name
            description = 'A libraries to bootstrap services easily that follow the patterns and specifications promoted by the SDA SE'
            url = 'https://github.com/SDA-SE/sda-dropwizard-commons'

            licenses {
              license {
                name = 'MIT License'
                url = 'https://raw.githubusercontent.com/SDA-SE/sda-dropwizard-commons/master/LICENSE'
              }
            }

            organization {
              name = 'SDA SE Open Industry Solutions'
              url = 'https://sda.se'
            }

            issueManagement {
              system = 'GitHub'
              url = 'https://github.com/SDA-SE/sda-dropwizard-commons/issues'
            }

            developers {
              developer {
                id = 'maintainer'
                name = 'SDA SE Open Industry Solutions Maintainer'
                email = 'sda-dropwizard-commons@sda.se'
              }
            }

            scm {
              connection = 'scm:git:https://github.com/SDA-SE/sda-dropwizard-commons.git'
              developerConnection = 'scm:git:https://github.com/SDA-SE/sda-dropwizard-commons.git'
              url = 'https://github.com/SDA-SE/sda-dropwizard-commons'
            }
          }
        }
      }

      repositories {
        maven {
          name = "sdaIntern"
          def releasesRepoUrl = "https://nexus.sda-se.io/repository/sda-se-releases/"
          def snapshotsRepoUrl = "https://nexus.sda-se.io/repository/sda-se-snapshots/"
          url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

          credentials {
            username System.getenv('SDA_NEXUS_USER')
            password System.getenv('SDA_NEXUS_PASSWORD')
          }
        }
        maven {
          name 'mavenCentral'
          def releasesRepoUrl =
              System.getenv('SONATYPE_STAGING_REPOSITORY_ID')
              ? "https://oss.sonatype.org/service/local/staging/deployByRepositoryId/${System.getenv('SONATYPE_STAGING_REPOSITORY_ID')}"
              : "https://oss.sonatype.org/service/local/staging/deploy/maven2"
          def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
          url = version.endsWith('-SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

          credentials {
            username System.getenv('SDA_SONATYPE_USER')
            password System.getenv('SDA_SONATYPE_PASSWORD')
          }
        }
      }
    }
  }
}

/**
 * Configure all regular submodules (all except the bom and dependency module)
 *
 * Problem is: You can't apply plugins 'java' and 'java-platform' at the same time.
 */
configure(subprojects.findAll { !javaPlatformModules.contains(it.name) }) {
  apply plugin: 'java'
  apply plugin: 'jacoco'

  sourceCompatibility = JavaVersion.VERSION_1_8

  // Configure JaCoCo to export the reports in XML format
  jacocoTestReport {
    reports {
      xml.enabled true
    }
  }

  // Configure sonar to use the aggregated global report file
  sonarqube {
    properties {
      property "sonar.coverage.jacoco.xmlReportPaths", '../build/reports/jacoco/report.xml'
      // TODO: Cleanup after sda-commons-server-starter is removed.
      property "sonar.cpd.exclusions", '**/sdase/commons/server/starter/**'
    }
  }

  dependencies {
    compile enforcedPlatform(project(':sda-commons-dependencies'))
  }

  sourceSets {
    main {
      output.resourcesDir = output.classesDirs.singleFile
    }
    test {
      output.resourcesDir = output.classesDirs.singleFile
    }
  }

  configurations.all {
    resolutionStrategy {
      // fail eagerly on version conflict (includes transitive dependencies)
      // e.g. multiple different versions of the same dependency (group and name are equal)
      failOnVersionConflict()
    }
  }
  test {
    useJUnitPlatform()
  }
}

/**
 * Add publishing configuration for Java modules.
 *
 * More Infos:
 * - sda-commons-bom and sda-commons-dependencies uses own publishing because it's just a BOM
 * - example modules and dependency-check should not be published at all
 */
configure(subprojects.findAll {
  !unpublishedModules.contains(it.name) && !it.name.endsWith("-example")
}) {
  task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier = 'sources'
    from sourceSets.main.allJava
  }

  javadoc {
    options.addStringOption('encoding', 'UTF-8')
  }

  task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
  }

  artifacts {
    archives jar
    archives sourcesJar
    archives javadocJar
  }

  publishing {
    publications {
      maven(MavenPublication) {
        from components.java

        artifact(sourcesJar) {
          classifier = 'sources'
        }

        artifact(javadocJar) {
          classifier = 'javadoc'
        }
      }
    }
  }

  jar {
    into("META-INF/maven/$project.group/$project.name") {
      from { generatePomFileForMavenPublication }
      rename ".*", "pom.xml"
    }
  }
}

/**
 * Add publishing configuration for Java platforms.
 */
configure(subprojects.findAll { javaPlatformModules.contains(it.name) }) {
  apply plugin: 'java-platform'

  publishing {
    publications {
      maven(MavenPublication) {
        from components.javaPlatform
      }
    }
  }
}

// Reconfigure the testReport task to display the results of all modules into a single report
task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  // Include the results from the `test` task in all subprojects
  reportOn subprojects.findAll { !javaPlatformModules.contains(it.name) }*.test
}

// Create a combined XML report of all modules in the root project
task codeCoverageReport(type: JacocoReport) {
  executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

  subprojects.findAll { !unpublishedModules.contains(it.name) }.each {
    // noinspection GroovyAssignabilityCheck
    sourceSets it.sourceSets.main
  }

  reports {
    xml.enabled = true
    xml.destination file("${buildDir}/reports/jacoco/report.xml")
  }
}

// Automatically close and release the staging repository that gets created
// during the upload to maven central.
nexusStaging {
  username System.getenv('SDA_SONATYPE_USER')
  password System.getenv('SDA_SONATYPE_PASSWORD')
  packageGroup "org.sdase.commons"
  // Read the stagingRepositoryId from the environment
  stagingRepositoryId.set(System.getenv('SONATYPE_STAGING_REPOSITORY_ID'))
}

sonarqube {
  properties {
    property 'sonar.projectKey', 'SDA-SE_sda-dropwizard-commons'
    property 'sonar.organization', 'sda-se'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.login', System.getenv('SONAR_LOGIN_TOKEN')

    property 'sonar.pullrequest.provider', 'GitHub'
    property 'sonar.pullrequest.github.repository', System.getenv('GITHUB_REPOSITORY')

    if (System.getenv('GITHUB_PR') != null) {
      property 'sonar.pullrequest.key', System.getenv('GITHUB_PR')
    }
  }
}