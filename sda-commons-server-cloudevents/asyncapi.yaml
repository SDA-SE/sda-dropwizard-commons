---
asyncapi: "2.3.0"
id: "urn:org:sdase:example:cars"
defaultContentType: "application/json"
info:
  title: "CloudEvents Test App"
  description: "This example demonstrates how CloudEvents are documented."
  version: "1.0.0"
channels:
  partner-created:
    publish:
      operationId: "publishPartnerCreatedEvents"
      summary: "Partner Created Events"
      description: "A new partner was created"
      message:
        oneOf:
        - $ref: "#/components/messages/PartnerCreatedEvent"
  contract-created:
    publish:
      operationId: "publishContractCreatedEvents"
      summary: "Contract Created Events"
      description: "A new contract was created"
      message:
        oneOf:
        - $ref: "#/components/messages/ContractCreatedEvent"
components:
  messages:
    PlainCloudEvent:
      title: "Plain CloudEvent"
      description: "The basic CloudEvent"
      payload:
        $ref: "#/components/schemas/PlainCloudEvent"
    PartnerCreatedEvent:
      title: "Partner Created"
      description: "An event that represents when a new partner was created"
      payload:
        $ref: "#/components/schemas/PartnerCreatedEvent"
    ContractCreatedEvent:
      title: "Contract Created"
      description: "An event that represents when a new contract was created"
      payload:
        $ref: "#/components/schemas/ContractCreatedEvent"
  schemas:
    ContractCreated:
      type: "object"
      additionalProperties: true
      properties:
        contractId:
          type: "string"
        partnerId:
          type: "string"
    ContractCreatedEvent:
      title: "Contract Created Event"
      type: "object"
      additionalProperties: true
      properties:
        specversion:
          type: "string"
          examples:
          - "1.0"
          minLength: 1
          description: "The version of the CloudEvents specification which the event\
            \ uses. This enables the interpretation of the context. Compliant event\
            \ producers MUST use a value of `1.0` when referring to this version of\
            \ the specification.\n\nCurrently, this attribute will only have the 'major'\
            \ and 'minor' version numbers included in it. This allows for 'patch'\
            \ changes to the specification to be made without changing this property's\
            \ value in the serialization. Note: for 'release candidate' releases a\
            \ suffix might be used for testing purposes."
        id:
          type: "string"
          examples:
          - "57d67827-3f4f-46e8-a126-fa6a6b724ae2"
          minLength: 1
          description: "Identifies the event. Producers MUST ensure that `source`\
            \ + `id` is unique for each distinct event. If a duplicate event is re-sent\
            \ (e.g. due to a network error) it MAY have the same id. Consumers MAY\
            \ assume that Events with identical `source` and `id` are duplicates.\n\
            \n**SDA**: The default is to use a random UUID."
        source:
          type: "string"
          default: "/SDA-SE/insurance-contract/insurance-contract-stack/insurance-contract-service"
          examples:
          - "/COMPANY/DOMAIN/SYSTEM/SERVICE"
          - "/SDA-SE/consent/partner-consent-stack/consent-configuration-service"
          description: "Identifies the context in which an event happened. Often this\
            \ will include information such as the type of the event source, the organization\
            \ publishing the event or the process that produced the event. The exact\
            \ syntax and semantics behind the data encoded in the URI is defined by\
            \ the event producer.\n\nProducers MUST ensure that `source` + `id` is\
            \ unique for each distinct event.\n\nAn application MAY assign a unique\
            \ `source` to each distinct producer, which makes it easy to produce unique\
            \ IDs since no other producer will have the same source. The application\
            \ MAY use UUIDs, URNs, DNS authorities or an application-specific scheme\
            \ to create unique source identifiers.\n\nA source MAY include more than\
            \ one producer. In that case the producers MUST collaborate to ensure\
            \ that `source` + `id` is unique for each distinct event.\n\n**SDA**:\
            \ Most importantly the source MUST identify the producer of your event\
            \ uniquely. If you don't have any other guidelines defined by your company\
            \ we recommend the following pattern:\n`/COMPANY/DOMAIN/SYSTEM/SERVICE`\n\
            \n- `COMPANY`: An identifier of the company that is responsible for the\
            \ service, e.g. `SDA-SE`\n- `DOMAIN`: The name of the business domain\
            \ of the service, e.g. `consent`\n- `SYSTEM`: The name of the system of\
            \ the service, e.g. `partner-consent-stack`\n- `SERVICE`: The name of\
            \ the service, e.g. `consent-configuration-service`"
        type:
          type: "string"
          default: "CONTRACT_CREATED"
          examples:
          - "com.sdase.relocation.service.customer.moved"
          - "com.sdase.consent.service.consent.agreed"
          - "com.sdase.offer.service.contract.offered"
          minLength: 1
          description: "This attribute contains a value describing the type of event\
            \ related to the originating occurrence. Often this attribute is used\
            \ for routing, observability, policy enforcement, etc. The format of this\
            \ is producer defined and might include information such as the version\
            \ of the type - see Versioning of Attributes in the Primer for more information.\n\
            \nIn compliance with the [Cloud Events specification](https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#type)\
            \ the value SHOULD be prefixed with a reverse-DNS name. The prefixed domain\
            \ dictates the organization which defines the semantics of this event\
            \ type.\n⚠️ Be careful if you want to derive the event type automatically\
            \ from a class or package name, because it makes it harder to refactor/rename\
            \ your class without changing your API."
        subject:
          type: "string"
          examples:
          - "terms-and-conditions-1"
          description: "This describes the subject of the event in the context of\
            \ the event producer (identified by `source`). In publish-subscribe scenarios,\
            \ a subscriber will typically subscribe to events emitted by a source,\
            \ but the `source` identifier alone might not be sufficient as a qualifier\
            \ for any specific event if the `source` context has internal sub-structure.\n\
            \nIdentifying the subject of the event in context metadata (opposed to\
            \ only in the data payload) is particularly helpful in generic subscription\
            \ filtering scenarios where middleware is unable to interpret the data\
            \ content. In the above example, the subscriber might only be interested\
            \ in blobs with names ending with '.jpg' or '.jpeg' and the subject attribute\
            \ allows for constructing a simple and efficient string-suffix filter\
            \ for that subset of events."
        datacontenttype:
          type: "string"
          default: "application/json"
          examples:
          - "application/json"
          description: "Content type of data value. This attribute enables data to\
            \ carry any type of content, whereby format and encoding might differ\
            \ from that of the chosen event format. For example, an event rendered\
            \ using the JSON envelope format might carry an XML payload in data, and\
            \ the consumer is informed by this attribute being set to \"application/xml\"\
            . The rules for how data content is rendered for different `datacontenttype`\
            \ values are defined in the event format specifications; for example,\
            \ the JSON event format defines the relationship in section 3.1.\n\nFor\
            \ some binary mode protocol bindings, this field is directly mapped to\
            \ the respective protocol's content-type metadata property. Normative\
            \ rules for the binary mode and the content-type metadata mapping can\
            \ be found in the respective protocol\n\nIn some event formats the `datacontenttype`\
            \ attribute MAY be omitted. For example, if a JSON format event has no\
            \ `datacontenttype` attribute, then it is implied that the data is a JSON\
            \ value conforming to the \"application/json\" media type. In other words:\
            \ a JSON-format event with no `datacontenttype` is exactly equivalent\
            \ to one with `datacontenttype=\"application/json\"`.\n\nWhen translating\
            \ an event message with no `datacontenttype` attribute to a different\
            \ format or protocol binding, the target `datacontenttype` SHOULD be set\
            \ explicitly to the implied `datacontenttype` of the source.\n\n**SDA**:\
            \ The default is to use 'application/json'"
        time:
          type: "string"
          examples:
          - "2022-03-12T23:20:50.52Z"
          format: "date-time"
          description: "Timestamp of when the occurrence happened. If the time of\
            \ the occurrence cannot be determined then this attribute MAY be set to\
            \ some other time (such as the current time) by the CloudEvents producer,\
            \ however all producers for the same source MUST be consistent in this\
            \ respect. In other words, either they all use the actual time of the\
            \ occurrence or they all use the same algorithm to determine the value\
            \ used.\n\n**SDA**: Default will be set to the current time."
        data:
          $ref: "#/components/schemas/ContractCreated"
          description: "As defined by the term Data, CloudEvents MAY include domain-specific\
            \ information about the occurrence."
      required:
      - "specversion"
      - "id"
      - "source"
      - "type"
    Object:
      type: "object"
      additionalProperties: true
      properties: {}
    PartnerCreated:
      type: "object"
      additionalProperties: true
      properties:
        id:
          type: "string"
    PartnerCreatedEvent:
      title: "Partner Created Event"
      type: "object"
      additionalProperties: true
      properties:
        specversion:
          type: "string"
          examples:
          - "1.0"
          minLength: 1
          description: "The version of the CloudEvents specification which the event\
            \ uses. This enables the interpretation of the context. Compliant event\
            \ producers MUST use a value of `1.0` when referring to this version of\
            \ the specification.\n\nCurrently, this attribute will only have the 'major'\
            \ and 'minor' version numbers included in it. This allows for 'patch'\
            \ changes to the specification to be made without changing this property's\
            \ value in the serialization. Note: for 'release candidate' releases a\
            \ suffix might be used for testing purposes."
        id:
          type: "string"
          examples:
          - "57d67827-3f4f-46e8-a126-fa6a6b724ae2"
          minLength: 1
          description: "Identifies the event. Producers MUST ensure that `source`\
            \ + `id` is unique for each distinct event. If a duplicate event is re-sent\
            \ (e.g. due to a network error) it MAY have the same id. Consumers MAY\
            \ assume that Events with identical `source` and `id` are duplicates.\n\
            \n**SDA**: The default is to use a random UUID."
        source:
          type: "string"
          default: "`/SDA-SE/partner/partner-stack/partner-service`"
          examples:
          - "/COMPANY/DOMAIN/SYSTEM/SERVICE"
          - "/SDA-SE/consent/partner-consent-stack/consent-configuration-service"
          description: "Identifies the context in which an event happened. Often this\
            \ will include information such as the type of the event source, the organization\
            \ publishing the event or the process that produced the event. The exact\
            \ syntax and semantics behind the data encoded in the URI is defined by\
            \ the event producer.\n\nProducers MUST ensure that `source` + `id` is\
            \ unique for each distinct event.\n\nAn application MAY assign a unique\
            \ `source` to each distinct producer, which makes it easy to produce unique\
            \ IDs since no other producer will have the same source. The application\
            \ MAY use UUIDs, URNs, DNS authorities or an application-specific scheme\
            \ to create unique source identifiers.\n\nA source MAY include more than\
            \ one producer. In that case the producers MUST collaborate to ensure\
            \ that `source` + `id` is unique for each distinct event.\n\n**SDA**:\
            \ Most importantly the source MUST identify the producer of your event\
            \ uniquely. If you don't have any other guidelines defined by your company\
            \ we recommend the following pattern:\n`/COMPANY/DOMAIN/SYSTEM/SERVICE`\n\
            \n- `COMPANY`: An identifier of the company that is responsible for the\
            \ service, e.g. `SDA-SE`\n- `DOMAIN`: The name of the business domain\
            \ of the service, e.g. `consent`\n- `SYSTEM`: The name of the system of\
            \ the service, e.g. `partner-consent-stack`\n- `SERVICE`: The name of\
            \ the service, e.g. `consent-configuration-service`"
        type:
          type: "string"
          default: "PARTNER_CREATED"
          examples:
          - "com.sdase.relocation.service.customer.moved"
          - "com.sdase.consent.service.consent.agreed"
          - "com.sdase.offer.service.contract.offered"
          minLength: 1
          description: "`PARTNER_CREATED`"
        subject:
          type: "string"
          examples:
          - "terms-and-conditions-1"
          description: "This describes the subject of the event in the context of\
            \ the event producer (identified by `source`). In publish-subscribe scenarios,\
            \ a subscriber will typically subscribe to events emitted by a source,\
            \ but the `source` identifier alone might not be sufficient as a qualifier\
            \ for any specific event if the `source` context has internal sub-structure.\n\
            \nIdentifying the subject of the event in context metadata (opposed to\
            \ only in the data payload) is particularly helpful in generic subscription\
            \ filtering scenarios where middleware is unable to interpret the data\
            \ content. In the above example, the subscriber might only be interested\
            \ in blobs with names ending with '.jpg' or '.jpeg' and the subject attribute\
            \ allows for constructing a simple and efficient string-suffix filter\
            \ for that subset of events."
        datacontenttype:
          type: "string"
          default: "application/json"
          examples:
          - "application/json"
          description: "Content type of data value. This attribute enables data to\
            \ carry any type of content, whereby format and encoding might differ\
            \ from that of the chosen event format. For example, an event rendered\
            \ using the JSON envelope format might carry an XML payload in data, and\
            \ the consumer is informed by this attribute being set to \"application/xml\"\
            . The rules for how data content is rendered for different `datacontenttype`\
            \ values are defined in the event format specifications; for example,\
            \ the JSON event format defines the relationship in section 3.1.\n\nFor\
            \ some binary mode protocol bindings, this field is directly mapped to\
            \ the respective protocol's content-type metadata property. Normative\
            \ rules for the binary mode and the content-type metadata mapping can\
            \ be found in the respective protocol\n\nIn some event formats the `datacontenttype`\
            \ attribute MAY be omitted. For example, if a JSON format event has no\
            \ `datacontenttype` attribute, then it is implied that the data is a JSON\
            \ value conforming to the \"application/json\" media type. In other words:\
            \ a JSON-format event with no `datacontenttype` is exactly equivalent\
            \ to one with `datacontenttype=\"application/json\"`.\n\nWhen translating\
            \ an event message with no `datacontenttype` attribute to a different\
            \ format or protocol binding, the target `datacontenttype` SHOULD be set\
            \ explicitly to the implied `datacontenttype` of the source.\n\n**SDA**:\
            \ The default is to use 'application/json'"
        time:
          type: "string"
          examples:
          - "2022-03-12T23:20:50.52Z"
          format: "date-time"
          description: "Timestamp of when the occurrence happened. If the time of\
            \ the occurrence cannot be determined then this attribute MAY be set to\
            \ some other time (such as the current time) by the CloudEvents producer,\
            \ however all producers for the same source MUST be consistent in this\
            \ respect. In other words, either they all use the actual time of the\
            \ occurrence or they all use the same algorithm to determine the value\
            \ used.\n\n**SDA**: Default will be set to the current time."
        data:
          $ref: "#/components/schemas/PartnerCreated"
          description: "As defined by the term Data, CloudEvents MAY include domain-specific\
            \ information about the occurrence."
      required:
      - "specversion"
      - "id"
      - "source"
      - "type"
    PlainCloudEvent:
      title: "Cloud Event V 1"
      type: "object"
      additionalProperties: true
      properties:
        specversion:
          type: "string"
          examples:
          - "1.0"
          minLength: 1
          description: "The version of the CloudEvents specification which the event\
            \ uses. This enables the interpretation of the context. Compliant event\
            \ producers MUST use a value of `1.0` when referring to this version of\
            \ the specification.\n\nCurrently, this attribute will only have the 'major'\
            \ and 'minor' version numbers included in it. This allows for 'patch'\
            \ changes to the specification to be made without changing this property's\
            \ value in the serialization. Note: for 'release candidate' releases a\
            \ suffix might be used for testing purposes."
        id:
          type: "string"
          examples:
          - "57d67827-3f4f-46e8-a126-fa6a6b724ae2"
          minLength: 1
          description: "Identifies the event. Producers MUST ensure that `source`\
            \ + `id` is unique for each distinct event. If a duplicate event is re-sent\
            \ (e.g. due to a network error) it MAY have the same id. Consumers MAY\
            \ assume that Events with identical `source` and `id` are duplicates.\n\
            \n**SDA**: The default is to use a random UUID."
        source:
          type: "string"
          examples:
          - "/COMPANY/DOMAIN/SYSTEM/SERVICE"
          - "/SDA-SE/consent/partner-consent-stack/consent-configuration-service"
          description: "Identifies the context in which an event happened. Often this\
            \ will include information such as the type of the event source, the organization\
            \ publishing the event or the process that produced the event. The exact\
            \ syntax and semantics behind the data encoded in the URI is defined by\
            \ the event producer.\n\nProducers MUST ensure that `source` + `id` is\
            \ unique for each distinct event.\n\nAn application MAY assign a unique\
            \ `source` to each distinct producer, which makes it easy to produce unique\
            \ IDs since no other producer will have the same source. The application\
            \ MAY use UUIDs, URNs, DNS authorities or an application-specific scheme\
            \ to create unique source identifiers.\n\nA source MAY include more than\
            \ one producer. In that case the producers MUST collaborate to ensure\
            \ that `source` + `id` is unique for each distinct event.\n\n**SDA**:\
            \ Most importantly the source MUST identify the producer of your event\
            \ uniquely. If you don't have any other guidelines defined by your company\
            \ we recommend the following pattern:\n`/COMPANY/DOMAIN/SYSTEM/SERVICE`\n\
            \n- `COMPANY`: An identifier of the company that is responsible for the\
            \ service, e.g. `SDA-SE`\n- `DOMAIN`: The name of the business domain\
            \ of the service, e.g. `consent`\n- `SYSTEM`: The name of the system of\
            \ the service, e.g. `partner-consent-stack`\n- `SERVICE`: The name of\
            \ the service, e.g. `consent-configuration-service`"
        type:
          type: "string"
          examples:
          - "com.sdase.relocation.service.customer.moved"
          - "com.sdase.consent.service.consent.agreed"
          - "com.sdase.offer.service.contract.offered"
          minLength: 1
          description: "This attribute contains a value describing the type of event\
            \ related to the originating occurrence. Often this attribute is used\
            \ for routing, observability, policy enforcement, etc. The format of this\
            \ is producer defined and might include information such as the version\
            \ of the type - see Versioning of Attributes in the Primer for more information.\n\
            \nIn compliance with the [Cloud Events specification](https://github.com/cloudevents/spec/blob/main/cloudevents/spec.md#type)\
            \ the value SHOULD be prefixed with a reverse-DNS name. The prefixed domain\
            \ dictates the organization which defines the semantics of this event\
            \ type.\n⚠️ Be careful if you want to derive the event type automatically\
            \ from a class or package name, because it makes it harder to refactor/rename\
            \ your class without changing your API."
        subject:
          type: "string"
          examples:
          - "terms-and-conditions-1"
          description: "This describes the subject of the event in the context of\
            \ the event producer (identified by `source`). In publish-subscribe scenarios,\
            \ a subscriber will typically subscribe to events emitted by a source,\
            \ but the `source` identifier alone might not be sufficient as a qualifier\
            \ for any specific event if the `source` context has internal sub-structure.\n\
            \nIdentifying the subject of the event in context metadata (opposed to\
            \ only in the data payload) is particularly helpful in generic subscription\
            \ filtering scenarios where middleware is unable to interpret the data\
            \ content. In the above example, the subscriber might only be interested\
            \ in blobs with names ending with '.jpg' or '.jpeg' and the subject attribute\
            \ allows for constructing a simple and efficient string-suffix filter\
            \ for that subset of events."
        datacontenttype:
          type: "string"
          default: "application/json"
          examples:
          - "application/json"
          description: "Content type of data value. This attribute enables data to\
            \ carry any type of content, whereby format and encoding might differ\
            \ from that of the chosen event format. For example, an event rendered\
            \ using the JSON envelope format might carry an XML payload in data, and\
            \ the consumer is informed by this attribute being set to \"application/xml\"\
            . The rules for how data content is rendered for different `datacontenttype`\
            \ values are defined in the event format specifications; for example,\
            \ the JSON event format defines the relationship in section 3.1.\n\nFor\
            \ some binary mode protocol bindings, this field is directly mapped to\
            \ the respective protocol's content-type metadata property. Normative\
            \ rules for the binary mode and the content-type metadata mapping can\
            \ be found in the respective protocol\n\nIn some event formats the `datacontenttype`\
            \ attribute MAY be omitted. For example, if a JSON format event has no\
            \ `datacontenttype` attribute, then it is implied that the data is a JSON\
            \ value conforming to the \"application/json\" media type. In other words:\
            \ a JSON-format event with no `datacontenttype` is exactly equivalent\
            \ to one with `datacontenttype=\"application/json\"`.\n\nWhen translating\
            \ an event message with no `datacontenttype` attribute to a different\
            \ format or protocol binding, the target `datacontenttype` SHOULD be set\
            \ explicitly to the implied `datacontenttype` of the source.\n\n**SDA**:\
            \ The default is to use 'application/json'"
        time:
          type: "string"
          examples:
          - "2022-03-12T23:20:50.52Z"
          format: "date-time"
          description: "Timestamp of when the occurrence happened. If the time of\
            \ the occurrence cannot be determined then this attribute MAY be set to\
            \ some other time (such as the current time) by the CloudEvents producer,\
            \ however all producers for the same source MUST be consistent in this\
            \ respect. In other words, either they all use the actual time of the\
            \ occurrence or they all use the same algorithm to determine the value\
            \ used.\n\n**SDA**: Default will be set to the current time."
        data:
          $ref: "#/components/schemas/Object"
          description: "As defined by the term Data, CloudEvents MAY include domain-specific\
            \ information about the occurrence."
      required:
      - "specversion"
      - "id"
      - "source"
      - "type"
