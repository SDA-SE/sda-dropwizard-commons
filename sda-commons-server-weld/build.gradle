dependencies {
  compile project(':sda-commons-server-dropwizard')

  compile 'org.jboss.weld.se:weld-se-core', {
    exclude group: 'org.jboss.spec.javax.el', module: 'jboss-el-api_3.0_spec'
    exclude group: 'jakarta.transaction', module: 'jakarta.transaction-api'
    /**
     * Dropwizard comes with jakarta.inject-api repackaged by glassfish for hk2 instead of
     * javax.inject.
     * Both contain the same classes.
     */
    exclude group: 'jakarta.inject', module: 'jakarta.inject-api'
    /**
     * Dropwizard manages jakarta.el from Glassfish
     */
    exclude group: 'org.jboss.spec.javax.el', module: 'jboss-el-api_3.0_spec'
    exclude group: 'jakarta.el', module: 'jakarta.el-api'

    /**
     * Weld itself has concurrent transitive dependencies:
     * jakarta.interceptor:jakarta.interceptor-api:1.2.5 and
     * org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.2_spec:2.0.0.Final with identical
     * classes. This causes duplicate classes in the application. We keep the official dependency.
     * When Weld is upgraded we need to check if jakarta.interceptor:jakarta.interceptor-api is
     * still in place.
     */
    exclude group: 'org.jboss.spec.javax.interceptor', module: 'jboss-interceptors-api_1.2_spec'
    /**
     * Dropwizard manages jakarta.annotation:jakarta.annotation-api while Weld brings
     * org.jboss.spec.javax.annotation:jboss-annotations-api_1.3_spec. Both have identical contents.
     * We keep the version managed by Dropwizard.
     */
    exclude group: 'org.jboss.spec.javax.annotation', module: 'jboss-annotations-api_1.3_spec'
  }
  compile 'org.jboss.weld.servlet:weld-servlet-core', {
    /**
     * Dropwizard manages jakarta.el from Glassfish
     */
    exclude group: 'org.jboss.spec.javax.el', module: 'jboss-el-api_3.0_spec'
    exclude group: 'jakarta.el', module: 'jakarta.el-api'

    exclude group: 'jakarta.transaction', module: 'jakarta.transaction-api'
    /**
     * Dropwizard comes with jakarta.inject-api repackaged by glassfish for hk2 instead of
     * javax.inject.
     * Both contain the same classes.
     */
    exclude group: 'jakarta.inject', module: 'jakarta.inject-api'
    /**
     * Weld itself has concurrent transitive dependencies:
     * jakarta.interceptor:jakarta.interceptor-api:1.2.5 and
     * org.jboss.spec.javax.interceptor:jboss-interceptors-api_1.2_spec:2.0.0.Final with identical
     * classes. This causes duplicate classes in the application. We keep the official dependency.
     * When Weld is upgraded we need to check if jakarta.interceptor:jakarta.interceptor-api is
     * still in place.
     */
    exclude group: 'org.jboss.spec.javax.interceptor', module: 'jboss-interceptors-api_1.2_spec'
    /**
     * Dropwizard manages jakarta.annotation:jakarta.annotation-api while Weld brings
     * org.jboss.spec.javax.annotation:jboss-annotations-api_1.3_spec. Both have identical contents.
     * We keep the version managed by Dropwizard.
     */
    exclude group: 'org.jboss.spec.javax.annotation', module: 'jboss-annotations-api_1.3_spec'
  }
  compile 'org.glassfish.hk2.external:jakarta.inject'
  compile 'org.glassfish:jakarta.el'
  compile 'jakarta.annotation:jakarta.annotation-api'

  compile 'jakarta.enterprise:jakarta.enterprise.cdi-api', {
    exclude group: 'jakarta.transaction', module: 'jakarta.transaction-api'
    /**
     * Dropwizard comes with jakarta.inject-api repackaged by glassfish for hk2 instead of
     * javax.inject.
     * Both contain the same classes.
     */
    exclude group: 'jakarta.inject', module: 'jakarta.inject-api'
    /**
     * Dropwizard manages jakarta.el from Glassfish
     */
    exclude group: 'jakarta.el', module: 'jakarta.el-api'
  }
  compile 'javax.transaction:javax.transaction-api'
  compile 'org.glassfish.jersey.ext.cdi:jersey-cdi1x'
}
